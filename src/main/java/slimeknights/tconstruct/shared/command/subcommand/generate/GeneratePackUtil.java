package slimeknights.tconstruct.shared.command.subcommand.generate;

import com.google.gson.JsonObject;
import net.minecraft.SharedConstants;
import net.minecraft.network.chat.ClickEvent;
import net.minecraft.network.chat.ClickEvent.Action;
import net.minecraft.network.chat.Component;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.packs.PackType;
import net.minecraft.world.level.storage.LevelResource;
import net.minecraftforge.fml.ModList;
import slimeknights.mantle.util.JsonHelper;
import slimeknights.tconstruct.TConstruct;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

/** Helpers for commands generating packs */
public class GeneratePackUtil {
  private static final String PACK_NAME = "TinkersConstructGenerated";
  private static final String PACK_DESCRIPTION = "Data pack generated by Tinkers' Construct commands.";

  private GeneratePackUtil() {}

  /** Gets the path to the datapack */
  public static Path getDatapackPath(MinecraftServer server, String packName) {
    // if we have JSON Things, do a global datapack
    if (ModList.get().isLoaded("jsonthings")) {
      return server.getServerDirectory().toPath().resolve("thingpacks/" + packName);
    }
    // otherwise, do a world local datapack
    return server.getWorldPath(LevelResource.DATAPACK_DIR).resolve(packName);
  }

  /** Gets the path to the datapack */
  public static Path getDatapackPath(MinecraftServer server) {
    return getDatapackPath(server, PACK_NAME);
  }

  /** Creates a mcmeta to make a valid pack */
  public static void saveMcmeta(Path folder, PackType packType, String description) {
    Path path = folder.resolve("pack.mcmeta");
    JsonObject meta = new JsonObject();
    JsonObject pack = new JsonObject();
    pack.addProperty("description", description);
    pack.addProperty("pack_format", SharedConstants.getCurrentVersion().getPackVersion(packType));
    meta.add("pack", pack);
    try {
      Files.createDirectories(path.getParent());
      String json = JsonHelper.DEFAULT_GSON.toJson(meta);
      try (BufferedWriter bufferedwriter = Files.newBufferedWriter(path)) {
        bufferedwriter.write(json);
      }
    } catch (IOException e) {
      TConstruct.LOG.error("Couldn't create pack.mcmeta", e);
    }
  }

  /** Creates a mcmeta to make the server datapack */
  public static void saveMcmeta(Path folder) {
    saveMcmeta(folder, PackType.SERVER_DATA, PACK_DESCRIPTION);
  }

  /**
   * Makes a clickable text component for the output folder
   * @param file  File
   * @return  Clickable text component
   */
  public static Component getOutputComponent(File file) {
    return getOutputComponent(file.getAbsolutePath());
  }

  /**
   * Makes a clickable text component for the output folder
   * @param path  Path to log
   * @return  Clickable text component
   */
  public static Component getOutputComponent(Path path) {
    return getOutputComponent(path.toString());
  }

  /**
   * Makes a clickable text component for the output folder
   * @param path  Path to log
   * @return  Clickable text component
   */
  public static Component getOutputComponent(String path) {
    return Component.literal(path)
      .withStyle(style -> style.withUnderlined(true).withClickEvent(new ClickEvent(Action.OPEN_FILE, path)));
  }
}
